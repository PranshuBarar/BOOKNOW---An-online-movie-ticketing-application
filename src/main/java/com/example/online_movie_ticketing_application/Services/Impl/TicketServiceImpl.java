package com.example.online_movie_ticketing_application.Services.Impl;

import com.example.online_movie_ticketing_application.Convertors.TicketConvertor;
import com.example.online_movie_ticketing_application.Entities.*;
import com.example.online_movie_ticketing_application.EntryDtos.TicketEntryDto;
import com.example.online_movie_ticketing_application.Enums.TicketStatus;
import com.example.online_movie_ticketing_application.Repository.ShowRepository;
import com.example.online_movie_ticketing_application.Repository.TheaterRepository;
import com.example.online_movie_ticketing_application.Repository.TicketRepository;
import com.example.online_movie_ticketing_application.Repository.UserRepository;
import com.example.online_movie_ticketing_application.ResponseDto.TicketDetailsResponseDto;
import com.example.online_movie_ticketing_application.Services.TicketService;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.util.Pair;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

@Service
public class TicketServiceImpl implements TicketService {

    @Autowired
    TicketRepository ticketRepository;

    @Autowired
    ShowRepository showRepository;

    @Autowired
    TheaterRepository theaterRepository;

    @Autowired
    UserRepository userRepository;


    public String bookTicket(TicketEntryDto ticketEntryDto) throws Exception {
        LocalDate showDate = ticketEntryDto.getShowDate();
        LocalTime showTime = ticketEntryDto.getShowTime();
        String theaterName = ticketEntryDto.getTheaterName();
        List<String> requestedSeats = ticketEntryDto.getRequestedSeats();

        TheaterEntity theaterEntity = theaterRepository.findByTheaterName(theaterName);
        int theaterId = theaterEntity.getId();

        ShowEntity showEntity = showRepository.findByTheaterEntityIdAndShowDateAndShowTime(showDate, showTime, theaterId);
        List<ShowSeatEntity> listOfSeatsForThisShow = showEntity.getShowSeatEntityList();

        String bookedSeats;
        int totalAmount;
        try{
            Pair<String,Integer> pair = bookTheSeats(requestedSeats, listOfSeatsForThisShow);
            bookedSeats = pair.getFirst();
            totalAmount = pair.getSecond();
        } catch (Exception e){
            return "Seat is already booked";
        }

        //=======================================================
        /*Extracting userId from the current authenticated user session*/
        int userId = FetchAuthenticatedUserDetails.getCurrentUserId();
        //=======================================================
        /*Ticket generation:
        * -> We will create a new ticketEntity object
        * -> Set all the attributes for that object
        * -> Save that ticketEntity object in the ticketRepository
        * -> Get the updated ticketEntity object with ticketId (automatically generated by MySQL DB)
        * -> Since ticket is child w.r.t. 'user' and 'show' both (hence cascading will not take place here, as cascading is always from top to bottom) therefore we will update both the parents
        * -> Return the bookedSeats string
        * */
        UserEntity userEntity = userRepository.findById(userId).get();
        String movieName = showEntity.getMovieEntity().getMovieName();
        String ticketId = UUID.randomUUID().toString();
        LocalDate localDate = showEntity.getShowDate();
        LocalTime localTime = showEntity.getShowTime();
        //we have already got theaterName from the TicketEntryDto

        TicketEntity ticketEntity = TicketEntity.builder().ticketId(ticketId).movieName(movieName)
                                    .showEntity(showEntity).theaterName(theaterName).bookedSeats(bookedSeats)
                                    .showDate(localDate).showTime(localTime).userEntity(userEntity)
                                    .totalAmount(totalAmount).status(TicketStatus.CONFIRMED).build();

        TicketEntity updatedTicketEntity = ticketRepository.save(ticketEntity);
        userEntity.getTicketEntityList().add(updatedTicketEntity);
        userRepository.save(userEntity);
        showEntity.getTicketEntityList().add(updatedTicketEntity);
        showRepository.save(showEntity);
        return "Tickets Booked : " + bookedSeats;
    }


    private Pair<String,Integer> bookTheSeats(List<String> requestedSeats,
                                              List<ShowSeatEntity> listOfSeatsForThisShow)
                                              throws Exception {

        for(ShowSeatEntity showSeatEntity : listOfSeatsForThisShow) {
            String seatNo = showSeatEntity.getSeatNo();
            if (requestedSeats.contains(seatNo)) {
                if (showSeatEntity.isBooked()) {
                    throw new Exception();
                }
            }
        }

        StringBuilder bookedSeats = new StringBuilder();
        int totalAmount = 0;
        for(ShowSeatEntity showSeatEntity : listOfSeatsForThisShow){
            String seatNo = showSeatEntity.getSeatNo();
            if (requestedSeats.contains(seatNo)){
                totalAmount += showSeatEntity.getPrice();
                if(bookedSeats.isEmpty()){
                    bookedSeats.append(seatNo);
                }
                else {
                    bookedSeats.append(", ").append(seatNo);
                }
                showSeatEntity.setBooked(true);
            }
        }
        return Pair.of(bookedSeats.toString(),totalAmount);
    }

    public String cancelTicket(int ticketId){
        TicketEntity ticketEntity = ticketRepository.findById(ticketId).get();

        String bookedSeats = ticketEntity.getBookedSeats();
        String[] bookedSeatsArr = bookedSeats.split(", ");

        ShowEntity showEntity = ticketEntity.getShowEntity();
        List<ShowSeatEntity> showSeatEntityList = showEntity.getShowSeatEntityList();

        cancelBookingOfSeats(bookedSeatsArr,showSeatEntityList);

        bookedSeats = Arrays.toString(bookedSeatsArr);
        ticketEntity.setBookedSeats(bookedSeats);

        ticketEntity.setStatus(TicketStatus.CANCELLED);
        ticketEntity.setBookedSeats(null);

        showRepository.save(showEntity);

        return "Ticket is cancelled";

    }

    private void cancelBookingOfSeats(String[] bookedSeatsArr, List<ShowSeatEntity> showSeatEntityList) {
        for(ShowSeatEntity showSeatEntity : showSeatEntityList){
            String seatNo = showSeatEntity.getSeatNo();
            if(Arrays.asList(bookedSeatsArr).contains(seatNo)){
                showSeatEntity.setBooked(false);
            }
        }
    }

    //Exception handling is required here
    public TicketDetailsResponseDto getDetails(String ticketUUID){
        TicketEntity ticketEntity = ticketRepository.findByTicketId(ticketUUID);
        if(ticketEntity != null){
            return TicketConvertor.convertEntityToDto(ticketEntity);
        } else {
            throw new EntityNotFoundException("Ticket with UUID: " + ticketUUID + " not found");
        }
    }


    public List<TicketEntity> getTicketsBookedByUser(String userEmail){
        UserEntity userEntity = userRepository.findByUserEmail(userEmail);
        return userEntity.getTicketEntityList();
    }
}
